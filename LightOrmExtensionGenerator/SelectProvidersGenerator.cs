using Generators.Shared;
using Microsoft.CodeAnalysis;
using System.Linq;

namespace LightOrmExtensionGenerator
{
    [Generator(LanguageNames.CSharp)]
    public class SelectProvidersGenerator : GeneratorBase
    {
        public override (string, string) Handler(AttributeData data)
        {
            var count = (int)data.GetNamedValue("ArgumentCount")!;
            string argsStr = GetTypesString(count);
            var code = $$"""
// <auto-generated/>
#pragma warning disable
#nullable enable
namespace LightORM.Providers.Select;

internal sealed partial class SelectProvider{{count}}<{{argsStr}}> : SelectProvider0<IExpSelect<{{argsStr}}>, T1>, IExpSelect<{{argsStr}}>
{
    public SelectProvider{{count}}(Expression exp, ISqlExecutor executor) : base(executor)
    {
        SelectExpression = new ExpressionInfo()
        {
            Expression = exp,
            ResolveOptions = SqlResolveOptions.Select
        };
        SqlBuilder.Expressions.Add(SelectExpression);
    }

    public IExpSelect<{{argsStr}}> GroupBy(Expression<Func<TypeSet<{{argsStr}}>, object>> exp)
    {
        return GroupByHandle(exp);
    }

    public IExpSelect<{{argsStr}}> OrderBy(Expression<Func<TypeSet<{{argsStr}}>, object>> exp, bool asc = true)
    {
        return OrderByHandle(exp, asc);
    }

    public IExpSelect<{{argsStr}}> Where(Expression<Func<TypeSet<{{argsStr}}>, bool>> exp)
    {
        return WhereHandle(exp);
    }

    public IExpSelect<{{argsStr}}> InnerJoin<TJoin>(Expression<Func<TypeSet<{{argsStr}}>, bool>> exp)
    {
        return JoinHandle<TJoin>(exp, ExpressionSql.TableLinkType.InnerJoin);
    }

    public IExpSelect<{{argsStr}}> LeftJoin<TJoin>(Expression<Func<TypeSet<{{argsStr}}>, bool>> exp)
    {
        return JoinHandle<TJoin>(exp, ExpressionSql.TableLinkType.LeftJoin);
    }

    public IExpSelect<{{argsStr}}> RightJoin<TJoin>(Expression<Func<TypeSet<{{argsStr}}>, bool>> exp)
    {
        return JoinHandle<TJoin>(exp, ExpressionSql.TableLinkType.RightJoin);
    }
}
""";
            var filename = $"SelectProviderT`{count.ToString().PadLeft(2, '0')}.g.cs";
            return (filename, code);
        }
    }
}
