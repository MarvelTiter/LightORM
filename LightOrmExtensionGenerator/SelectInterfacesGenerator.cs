using Generators.Shared;
using Microsoft.CodeAnalysis;

namespace LightOrmExtensionGenerator
{
    [Generator(LanguageNames.CSharp)]
    public class SelectInterfacesGenerator : GeneratorBase
    {
        public override (string, string) Handler(AttributeData data)
        {
            var count = (int)data.GetNamedValue("ArgumentCount")!;
            string argsStr = GetTypesString(count);
            var code = $$"""
// <auto-generated/>
#pragma warning disable
#nullable enable
namespace LightORM;
public interface IExpSelect<{{argsStr}}> : IExpSelect0<IExpSelect<{{argsStr}}>, T1>
{
    //IEnumerable<TReturn> ToList<TReturn>(Expression<Func<TypeSet<{{argsStr}}>, object>> exp);
    //Task<IList<TReturn>> ToListAsync<TReturn>(Expression<Func<TypeSet<{{argsStr}}>, object>> exp);
    IExpSelect<{{argsStr}}> Where(Expression<Func<TypeSet<{{argsStr}}>, bool>> exp);
    IExpSelect<{{argsStr}}> OrderBy(Expression<Func<TypeSet<{{argsStr}}>, object>> exp, bool asc = true);
    IExpSelect<{{argsStr}}> GroupBy(Expression<Func<TypeSet<{{argsStr}}>, object>> exp);
    IExpSelect<{{argsStr}}> InnerJoin<TJoin>(Expression<Func<TypeSet<{{argsStr}}>, bool>> exp);
    IExpSelect<{{argsStr}}> LeftJoin<TJoin>(Expression<Func<TypeSet<{{argsStr}}>, bool>> exp);
    IExpSelect<{{argsStr}}> RightJoin<TJoin>(Expression<Func<TypeSet<{{argsStr}}>, bool>> exp);
}
""";
            var filename = $"IExpSelectT`{count.ToString().PadLeft(2, '0')}.g.cs";

            return (filename, code);
        }
    }
}
