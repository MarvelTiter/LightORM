# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: publish

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Update Submodule
      run: git submodule update --init --recursive 
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Main
      run: |
        dotnet build ./src/LightOrmTableContextGenerator/LightOrmTableContextGenerator.csproj -c Release
        dotnet build ./src/LightORM/LightORM.csproj -c Release
        dotnet pack ./src/LightORM/LightORM.csproj -c Release -o publish
        dotnet nuget push 'publish/*.nupkg' -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}} --skip-duplicate
    - name: SqlServer Provider
      run: |
        dotnet build ./src/Providers/LightORM.Providers.SqlServer/LightORM.Providers.SqlServer.csproj -c Release
        dotnet pack ./src/Providers/LightORM.Providers.SqlServer/LightORM.Providers.SqlServer.csproj -c Release -o publish/SqlServer
        dotnet nuget push 'publish/SqlServer/*.nupkg' -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}} --skip-duplicate
    - name: MySql Provider
      run: |
        dotnet build ./src/Providers/LightORM.Providers.MySql/LightORM.Providers.MySql.csproj -c Release
        dotnet pack ./src/Providers/LightORM.Providers.MySql/LightORM.Providers.MySql.csproj -c Release -o publish/MySql
        dotnet nuget push 'publish/MySql/*.nupkg' -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}} --skip-duplicate
    - name: Oracle Provider
      run: |
        dotnet build ./src/Providers/LightORM.Providers.Oracle/LightORM.Providers.Oracle.csproj -c Release
        dotnet pack ./src/Providers/LightORM.Providers.Oracle/LightORM.Providers.Oracle.csproj -c Release -o publish/Oracle
        dotnet nuget push 'publish/Oracle/*.nupkg' -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}} --skip-duplicate
    - name: Sqlite Provider
      run: |
        dotnet build ./src/Providers/LightORM.Providers.Sqlite/LightORM.Providers.Sqlite.csproj -c Release
        dotnet pack ./src/Providers/LightORM.Providers.Sqlite/LightORM.Providers.Sqlite.csproj -c Release -o publish/Sqlite
        dotnet nuget push 'publish/Sqlite/*.nupkg' -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}} --skip-duplicate       
    - name: PostgreSQL Provider
      run: |
        dotnet build ./src/Providers/LightORM.Providers.PostgreSQL/LightORM.Providers.PostgreSQL.csproj -c Release
        dotnet pack ./src/Providers/LightORM.Providers.PostgreSQL/LightORM.Providers.PostgreSQL.csproj -c Release -o publish/PostgreSQL
        dotnet nuget push 'publish/PostgreSQL/*.nupkg' -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}} --skip-duplicate
    - name: Dameng Provider
      run: |
        dotnet build ./src/Providers/LightORM.Providers.Dameng/LightORM.Providers.Dameng.csproj -c Release
        dotnet pack ./src/Providers/LightORM.Providers.Dameng/LightORM.Providers.Dameng.csproj -c Release -o publish/Dameng
        dotnet nuget push 'publish/Dameng/*.nupkg' -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}} --skip-duplicate 
